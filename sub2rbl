#!/bin/sh
#
# sub2rbl -> Subscribe to IP or CIDR (net) RBLs; auto-integrates into iptables - @robzr
#
#   https://github.com/robzr/sub2rbl
#
# Recommended to run out of cron periodically, using default parameters.
#
# Dependencies: ipset (200k) needed for basic operation
#               curl (33k) + ca-certificates (186k) needed if using HTTPS RBLs

uciSection='sub2rbl.@[0]'

uciLoadVar () {
  local getUci
  getUci=`uci -q get ${uciSection}."$1"` || getUci="$2"
  eval $1=\'$getUci\';
}

uciLoad() {
  local delim="
"
  [ "$1" = -d ] && { delim="$2"; shift; shift; }
  uci -q -d"$delim" get "$uciSection.$1" 2>/dev/null || while [ -n "$2" ]; do echo $2; shift; done
}

# Make changes to these uci values in /etc/config/sub2rbl
uciLoadVar setName sub2rbl
uciLoadVar logLevel 1
uciLoadVar logFacility authpriv.notice
uciLoadVar firewallTarget DROP
firewallHookChains="`uciLoad -d \  firewallHookChain input_wan_rule:1 forwarding_wan_rule:1`"

# Advanced settings - not documented in sample config
uciLoadVar netSetName "$setName"-net
uciLoadVar logTag "sub2rbl[$$]"
uciLoadVar ipsetArgs "maxelem 32768"
uciLoadVar webGetCmd guess

# if webGetCmd is set to guess (default), we'll try to autoselect
# between a few options for an TLS ready http client.
[ "$webGetCmd" = guess ] && {
  if [ -x /usr/bin/wget-ssl ] ; then
    webGetCmd="/usr/bin/wget-ssl -qT15 -t2 -O"  # GNU wget - to avoid OpenWRT curl issues
  elif [ -x /usr/bin/curl ] ; then
    webGetCmd="/usr/bin/curl -sSm15 -o"  # curl with mbedTLS - most lightweight option
  else
    # lastly, busybox wget - bad option as it fails on some TLS connections like spamhaus
    webGetCmd="/usr/bin/wget -qO"
  fi
}

# Functions 
#
logLine() {
  [ $1 -gt $logLevel ] && return ; shift
  if [ "$logFacility" = "stdout" ] ; then echo "$@"
  elif [ "$logFacility" = "stderr" ] ; then echo "$@" >&2
  else logger -t "$logTag" -p "$logFacility" "$@"
  fi
}

# Arg: $1=logLevel, $2=setName, $3=setType (ip or net)
createSet() {
  local useLogLevel="$1" set="$2" setType="$3"
  ipset list -q -n "$set" >/dev/null || {
    logLine $useLogLevel "Creating ipset $set"
    ipset create "$set" hash:"$setType" $ipsetArgs
} }

# Arg: $1=logLevel, $2=setName
removeSet() {
  local useLogLevel=$1 set="$2" 
  ipset list -q -n "$set" >/dev/null && {
    logLine $useLogLevel "Destroying ipset $set"
    ipset destroy "$set"
} }

# Arg: 1=$setName
setupIPTables() {
  local set="$1" x chain position
  for x in $firewallHookChains ; do
    chain="${x%:*}" ; position="${x#*:}"
    if [ $position -ge 0 ] && ! iptables -C "$chain" -m set --match-set "$set" src -j "$firewallTarget" 2>/dev/null ; then
      logLine 1 "Inserting iptables rule for $set into chain $chain"
      if [ $position = 0 ] ; then
        iptables -A "$chain" -m set --match-set "$set" src -j "$firewallTarget"
      else
        iptables -I "$chain" $position -m set --match-set "$set" src -j "$firewallTarget"
  fi ; fi ; done
}

# Arg: 1=$setName
removeFromIPTables() {
  local set="$1" x chain position
  for x in $firewallHookChains ; do
    chain="${x%:*}" ; position="${x#*:}"
    if [ $position -ge 0 ] && iptables -C "$chain" -m set --match-set "$set" src -j "$firewallTarget" 2>/dev/null ; then
      logLine 1 "Removing iptables rule for $set from chain $chain"
      iptables -D "$chain" -m set --match-set "$set" src -j "$firewallTarget"
  fi ; done
}

printUsage() {
  cat <<-_EOF_
	Usage: sub2rbl [-C ...] [-f ...] [-j ...] [-l #] [-s ...] [-w] [URL ...]
	  -C ... firewall hook chains:positions (def: $firewallHookChains)
	  -f ... log facility (syslog facility or stdout/stderr) (def: $logFacility)
	  -j ... firewall target when matching the set (def: $firewallTarget)
	  -l #   log level - 0=off, 1=standard, 2=verbose (def: $logLevel)
	  -s ... ipset name
	  -w     wipe ipset and iptables rule (do not process RBLs)
	  URL(s) RBL URLs - using command line RBL URLs will override uci entries
	_EOF_
}


# Logic begins
#
wipe=false
while [[ $# -gt 1 ]]; do
  arg="$1"
  case "$arg" in
    -C) firewallHookChains="$2"; shift ;;
    -f) logFacility="$2"; shift ;;
    -j) firewallTarget="$2"; shift ;;
    -l) logLevel="$2"; shift ;;
    -s) setName="$2"; shift ;;
    -w) wipe=true ;;
    *) printUsage
      exit 254
  esac
  shift
done 

if $wipe ; then
  logLine 2 "Wiping sub2rbl from iptables and ipset"
  for tempSet in "$setName" "$netSetName" ; do
    removeFromIPTables "$tempSet"
    removeSet 1 "$tempSet"
  done
  exit
fi

rblList="$@"
swingSetName="${setName}_swing"
swingNetSetName="${netSetName}_swing"
tmpFile="`mktemp`"
tmpFile2="`mktemp`"

whiteList="`uciLoad -d '|' whitelist`"

# First we process our regular RBLs (IP based)
uciLoad rbl | while read rbl ; do
  if [ ${rbl%%:*} = net ] ; then
    setType='net' 		# process net-based RBLs
    rbl="${rbl##net:}"
    tempSet="$netSetName"
  else
    setType='ip'		# default is IP-based (default)
    tempSet="$setName"
  fi
  createSet 1 "$tempSet" $setType
  createSet 2 "$tempSet"_swing $setType
  logLine 2 "Retrieving RBL ($rbl)"
  if ! errorMsg=`$webGetCmd "$tmpFile" "$rbl" 2>&1`; then
    logLine 1 "Error: retrieving RBL($rbl): $errorMsg"
    continue
  fi
  logLine 3 "Processing RBL ($rbl)"

  if [ $setType = ip ] ; then
    # autodetect the DRG sshpwauth report
    egrep -v '^#' "$tmpFile" | head -1 | grep -q '^.*|.*|.*|.*|.*sshpwauth'
    if [ $? -eq 0 ] ; then
      logLine 3 "Loading DRG pwauth"
      sed -n 's/^.*|.*| *\([0-9\.][0-9\.]*\) .*$/\1/p' "$tmpFile" > "$tmpFile2"
    else
      logLine 3 "Loading plain IP list"
      sed -n 's/^ *\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\)[ 	]*.*$/\1/p' "$tmpFile" > "$tmpFile2"
    fi
  elif [ $setType = net ] ; then
      logLine 3 "Loading plain Net list"
      sed -n 's#^ *\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*[/0-9]*\)[ 	]*.*$#\1#p' "$tmpFile" > "$tmpFile2"
  fi
  if [ -n "$whiteList" ] ; then
    logLine 3 "Applying whitelist"
    egrep -v "$whiteList" "$tmpFile2" > "$tmpFile"
    mv "$tmpFile" "$tmpFile2"
  fi
  sed -i "s/^/add "$tempSet"_swing /" "$tmpFile2"
  setSizeBefore=`ipset save "$tempSet"_swing | egrep -c '^add '`
  ipset restore -f "$tmpFile2" -\!
  setSize=`ipset save "$tempSet"_swing | egrep -c '^add '`
  logLine 1 "RBL ($rbl) added $((setSize - setSizeBefore)) entries"
done

rm -f "$tmpFile" "$tmpFile2"

for tempSet in "$setName" "$netSetName" ; do
  if ipset list -q -n "$tempSet"_swing >/dev/null ; then
    setupIPTables "$tempSet"
    logLine 3 "Swinging set $tempSet"
    ipset swap "$tempSet" "$tempSet"_swing
    removeSet 2 "$tempSet"_swing
  fi
done
